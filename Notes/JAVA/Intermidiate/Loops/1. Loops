Java provides three basic forms of looping: 
1. the while statement:  
The syntax for the while statement is
while( expression )
statement
next statement
Note that like the if statement, there is no semicolon in the syntax. 
If one is present, it will be taken as the null statement.

While expression is true, statement is executed; then expression is reevaluated. If expression is initially false, then statement will never be executed. Generally, statement does something that can potentially alter the value of expression;
otherwise, the loop could be infinite. When the while loop terminates (normally), control resumes at the next statement.

2. for statement: 
The for statement is used primarily for iteration. Its syntax is
for( initialization; test; update )
statement
next statement
Here, initialization, test, and update are all expressions, and all three are
optional. If test is not provided, it defaults to true. There is no semicolon
after the closing parenthesis

3. Do statement. 
The while statement repeatedly performs a test. If the test is true, it then
executes an embedded statement. However, if the initial test is false, the
embedded statement is never executed. In some cases, however, we would
like to guarantee that the embedded statement is executed at least once. This
is done using the do statement. The do statement is identical to the while
statement, except that the test is performed after the embedded statement.
The syntax is
do
statement
while( expression );
next statement


Break Keyword: The break statement, which is the keyword break followed 
by a semicolon, can be used to achieve this.
Typically, an if statement would precede the break, as in
while( ... ){
    ...
    if( something )
        break;
    ...
}
we would like to terminate execution in the
middle of a repeated (compound) statement.


Continue Keyword: Occasionally, we want to give up on the current iteration of a loop and go on to the next iteration. This can be handled by using a continue statement.
Like the break statement, the continue statement includes a semicolon and
applies to the innermost loop only. The following fragment prints the first 100
integers, with the exception of those divisible by 10:
for( int i = 1; i <= 100; i++ ){
    if( i % 10 == 0 )
        continue;
        System.out.println( i );
}
Of course, in this example, there are alternatives to the continue statement. However,
continue is commonly used to avoid complicated if-else patterns inside loop. 
